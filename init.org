#+STARTUP: showeverything
#+TITLE: grzm's Emacs configuration
#+AUTHOR: Michael Glaesemann
#+PROPERTY: header-args :tangle yes
#+BABEL :cache yes

This is my dot-emacs. There are many like it, but this one is mine. My
dot-emacs is my best friend. It is my life. I must master it as I
master my life. My dot-emacs, without me, is useless. Without my
dot-emacs, I am useless.

* Requirements

The configuration requires =use-package=.

I generally use this configuration with [[https://emacsformacosx.com][Emacs for Mac OS X]].

* Initialization

My brain works better in lexical scope.

=lexical-binding= is the default for =(version< emacs-version
"27.1")=. That's what I'm using now, so I've commented this out. I'm
leaving it for reference.

#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-
#+end_src

** Debugging (when I want it)

#+begin_src emacs-lisp
;; (setq debug-on-error  t)
#+end_src

And if I'm debugging, I'll likely want to start Emacs with
~--debug-init -nw~. With Emacs for Mac OS X, that's

#+begin_src shell :tangle no
~/Applications/Emacs.app/Contents/MacOS/Emacs --debug-init -nw
#+end_src

Including this shell block results in some additional message during startup:
#+begin_quote
Setting up indent for shell type zsh
Indentation variables are now local.
Indentation setup for shell type zsh
#+end_quote

These messages are hard-coded when =sh-mode= is invoked. You can get rid
of these messages using advice [[https://emacs.stackexchange.com/a/53009][this response]] in Stack
Overflow. Another way would be to use [[https://github.com/raxod502/el-patch][el-patch]] to remove these
hard-coded messages as Radon Rosborough does in the [[https://github.com/raxod502/radian/commit/4ae79d629c4360a5f281cfc330154c900720d4b1][radian
package]]. But for now I'll just leave this note. (Wow. [[https://github.com/raxod502][Radon Rosborough]]
is cranking out great Emacs packages!)

** Initialization timing

I'm interested in how long Emacs initialization takes. This isn't
something I monitor closely, but I can't measure it if I don't add
code to do so. This is lifted from [[https://github.com/jwiegley/dot-emacs][John Wiegley's config]], the
gentleman who brought us (among other things), =use-package=. Not
surprisingly, he's /very/ interested in initialization performance. His
is another Emacs config that's worth reviewing for ideas.

#+begin_src emacs-lisp
(defconst emacs-start-time (current-time))

(unless noninteractive
  (message "Loading %s..." load-file-name))
#+end_src

** Tangling

=init.el= is loaded first, which, among other things, tangles and loads
this file, which contains the majority of my Emacs configuration. The
tangled output actually replaces the =init.el= in the repo. After
initial checkout, I don't want to track this generated replacement, so
I can tell git to ignore it:

#+begin_src shell :tangle no
git update-index --assume-unchanged init.el
#+end_src

And if there /are/ modifications I want to make, I can tell git to track
changes again.

#+begin_src shell :tangle no
git update-index --no-assume-unchanged init.el
#+end_src

If for some reason you want to start from the committed =init.el= again,
just check it out. Git will pull it from the index, but still not track it.

#+begin_src shell :tangle no
git checkout init.el
#+end_src

And let's have this file automatically re-tangled on save to keep
=init.el= up-to-date.

#+begin_src emacs-lisp
(defun tangle-init ()
  "If the current buffer is 'init.org' the code-blocks are tangled, and the tangled file is compiled."
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle))))

(add-hook 'after-save-hook 'tangle-init)
#+end_src

This method of is largely based on [[https://github.com/larstvei/dot-emacs][Lars Tveito's config]]. He also
byte-compiles the output. I haven't seen any performance advantage of
byte-compiling my setup, so I've removed that as it brings along
another layer of complexity. There's a lot of other great stuff his
config; it's well worth a look.

** straight.el
I want an immutable package manager. I'm primarily waiting on three
things:

  * determining how I can easily detect if my packages are out of date
    and update them individually
  * convince myself there aren't gotchas that will be too much work to
    work around
  * convince myself that the project is going to be maintained for the
    foreseeable future.

I was convinced that I could move to [[https://github.com/raxod502/straight.el][straight.el]] by a blog post by
David Crook, [[https://github.crookster.org/switching-to-straight.el-from-emacs-26-builtin-package.el/]["Switching to straight.el from Emacs 26 builtin
package.el"]]. The situation has improved quite a bit since the post was
written (13 November 2018); the org-specific fixes are now part of
straight itself.

I tried this first on 2020-12-06, but reverted because I couldn't
figure out issues around org-ref (likely related to my ignorance
around autoloading). However, the melpa issues on [[https://github.com/melpa/melpa/issues/7312#issuecomment-751142747][melpa packaging issues on 2020-12-24]],
um, scared me straight, so I'm giving it another go.

First, bootstrap straight.el.

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)

(setq straight-use-package-by-default t)
(setq-default use-package-always-defer t)
#+end_src

** Detection
#+begin_src emacs-lisp
(defun is-mac-p ()
  (eq system-type 'darwin))

(defun is-linux-p ()
  (eq system-type 'gnu/linux))

(defun grzm/is-koke-p ()
  (string-equal (system-name) "koke.local"))

(defun grzm/is-m1-arm-p ()
  (grzm/is-koke-p))
#+end_src

The built-in ~window-system~ function and variable are also useful (and
used below) when modifying configuration for particular machines and
environments. For example, I don't do work with org-roam or pdfs when
not using gui Emacs, so I'm including them only ~:if window-system~.

* Configuration

Set default directory to =$HOME= when it's not otherwise set (such as
startup). It can default to =/= which is rarely what I want.
#+begin_src emacs-lisp
(setq default-directory "~/")
#+end_src

All of my configuration should be declared here. I'm not going to use
the custom settings interface, so use a temporary file for anyone that
thinks they need to reference it.
#+begin_src emacs-lisp
(setq custom-file (make-temp-file "emacs--custom-file"))
#+end_src

Besides being Lisp, =cl= provides =labels= and =defvar=, used
below. Wrapped gently in =eval-when-compile= to silence

#+begin_quote
Warning (bytecomp): cl package required at runtime
#+end_quote

#+begin_src emacs-lisp
(eval-when-compile
  (let* ((grzm/cl-package-deprecated-p (<= 27 emacs-major-version)))
    (when (not grzm/cl-package-deprecated-p)
      (require 'cl))))
#+end_src

#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
#+end_src

#+begin_src emacs-lisp
(eval-and-compile
  (mapc #'(lambda (path)
            (add-to-list 'load-path
                         (expand-file-name path user-emacs-directory)))
        '("elisp" "elpa")))
#+end_src

#+begin_src emacs-lisp
(let* ((local-org-mode-lisp "~/dev/org-mode/lisp"))
  (when (file-exists-p local-org-mode-lisp)
    (add-to-list 'load-path (expand-file-name "~/dev/org-mode/lisp"))))
#+end_src

#+begin_src emacs-lisp
(defsubst hook-into-modes (func &rest modes)
  (dolist (mode-hook modes) (add-hook mode-hook func)))
#+end_src

Use =y= and =n= in lieu of =yes= and =no= in mini-buffer prompts.

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

#+begin_src emacs-lisp
(setq confirm-nonexistent-file-or-buffer nil)
#+end_src

#+begin_src emacs-lisp
(setq kill-buffer-query-functions
      (remq 'process-kill-buffer-query-function
            kill-buffer-query-functions))
#+end_src

#+begin_src emacs-lisp
(defconst sans-font-family "Source Code Pro")
(defconst variable-font-family "OfficinaSansITCStd")
(set-face-attribute 'default nil
                    :family sans-font-family
                    :weight 'normal
                    :height 140)
(set-face-attribute 'fixed-pitch nil :family sans-font-family :height 1.0)
(set-face-attribute 'variable-pitch nil :family variable-font-family :height 1.2)

(setq-default line-spacing 0.4)
#+end_src

#+begin_src emacs-lisp
(defun clean-up-buffer ()
  "Indent the entire buffer."
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) nil)
  (untabify (point-min) (point-max)))
#+end_src

#+begin_src emacs-lisp
(let ((sources (if (is-mac-p)
                   (quote
                    ("~/.authinfo" "~/.authinfo.gpg" "~/.netrc" macos-keychain-internet))
                 (quote ("~/.authinfo" "~/.authinfo.gpg" "~/.netrc")))))
  (setq auth-sources sources))
#+end_src

I don't want to hear about advice redefinitions, messages like
#+begin_quote
ad-handle-definition: ‘vc-revert’ got redefined
#+end_quote
From [[https://andrewjamesjohnson.com/suppressing-ad-handle-definition-warnings-in-emacs/][Andrew Johnson]]
#+begin_src emacs-lisp
(setq ad-redefinition-action 'accept)
#+end_src

** UI settings

Quiet startup: Don't display the splash screen, start with a clear
scratch buffer, and don't display /"For information about GNU Emacs
and the GNU system, type C-h C-a."/.  This last is surprisingly
difficult to do, and requires both the =put= call and setting the
value to your user name.

From https://emacs.stackexchange.com/a/36303, with one change: use a
non-empty list (e.g., =(t)=) instead of =t= for the ='saved-value= or
you'll see errors like /(wrong-type-argument listp t)/ when Emacs
first tries to write customizations, and errors like /'forward-sexp:
Scan error: "Unbalanced parentheses"/ when it subsequently tries to
read the malformed custom-file contents it attempted to write.

#+begin_src emacs-lisp
(put 'inhibit-startup-echo-area-message 'saved-value '(t))
(setq inhibit-startup-screen t
      initial-scratch-message ""
      inhibit-startup-echo-area-message user-login-name)
#+end_src

When in a windowing system, set the default window size.

#+begin_src emacs-lisp
(when (window-system)
  (setq initial-frame-alist
        `((top . 0)
          (left . 0.5)
          (height . 1.0)
          (width . 100)))
  (setq default-frame-alist (copy-alist initial-frame-alist)))
#+end_src

#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path
               (file-name-as-directory
                (expand-file-name "themes" user-emacs-directory)))
(let* ((theme (cond ((window-system) 'grzm-ivory)
                    ((is-linux-p) 'solarized-dark)
                    (t 'minima-ebony))))
  (load-theme theme t))
#+end_src

Hide the toolbar.

#+begin_src emacs-lisp
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
;; I generally want scrollbars, but as a reminder of the option:
;; (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+end_src

Always display the column number.

#+begin_src emacs-lisp
(setq column-number-mode t)
#+end_src

Who likes to be interrupted by a bell? I certainly don't.

#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

** Editing

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil) ;; insert multiple spaces instead of tabs
#+end_src

#+begin_src emacs-lisp
(show-paren-mode t)
#+end_src

#+begin_src emacs-lisp

;; Use C-x C-m as a shortcut for M-x: Let's save our small fingers!
;; Hint from Steve Yegge: http://steve.yegge.googlepages.com/effective-emacs
;; Invoice M-x without the alt key
(global-set-key "\C-x\C-m" 'execute-extended-command)

;; Steve also recommends adding C-c C-m to allow for slop in hitting C-x
;; Don't know if I'll need that now, but it might be nice in the future
;;(global-set-key "\C-x\C-m" 'execute-extended-command)
;; However, I often mistype C-x m and I don't use mail, so
(global-set-key "\C-xm" 'execute-extended-command)

;;; Unbind `C-x f', which, by default sets fill-text width, which is uncommon
(global-unset-key "\C-xf")

;;; Rebind `C-x C-b' for 'buffer-menu', rather than list-buffers
(global-set-key "\C-x\C-b" 'buffer-menu)

;; Item 3: Prefer backward-kill-word over Backspace
;; Another of Steve Yegge's hints
;; For fast typists, it's faster to retype a word rather than backspace
;; to fix just the error, so map this to C-w. However, C-w is already
;; mapped for kill-region, so remap kill-region to C-x C-k
(global-set-key "\C-w" 'backward-kill-word)
(global-set-key "\C-x\C-k" 'kill-region)
;; Again, Steve maps C-c C-k as well
;; (global-set-key "\C-c\C-k" 'kill-region)

;; Item 9: Master Emacs's regular expressions
;; Bind M-r and M-s to isearch-forward-regexp and isearch-backward-regexp
;; Note that this stomps on the default binding for move-to-window-line (M-r)
(global-set-key "\M-s" 'isearch-forward-regexp)
(global-set-key "\M-r" 'search-backward-regexp)

;; Since query-replace-regexp and (replace-regexp) are so useful,
;; give them abbreviated aliases
(defalias 'rr 'replace-regexp)
(defalias 'qrr 'query-replace-regexp)

;; from http://wiki.rubygarden.org/Ruby/page/show/InstallingEmacsExtensions
;; This is also of interrest, it automagically does a "chmod u+x" when you
;; save a script file (starting with "#!").
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)

(setq backup-directory-alist `(("." . "~/.saves")))
(setq backup-by-copying t)

(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)

(setq vc-follow-symlinks t)
#+end_src

** f and s
I use the =f= (file) and =s= (string) packages to configure subsequent
packages, so load them first.

*** f
#+begin_src emacs-lisp
(use-package f
 :commands (f-touch))
#+end_src

*** s
#+begin_src emacs-lisp
(use-package s
  :commands (s-downcase s-join s-trim))
#+end_src


** Work/Personal separation

I have some work-specific Emacs configuration that I like to keep
in a separate repo from my personal setup. Let's see if it's there.

#+begin_src emacs-lisp
(defvar work-emacs-directory "~/.emacs.work.d/")
(defvar work-p (file-exists-p work-emacs-directory))
#+end_src

#+begin_src emacs-lisp
(when work-p
  (org-babel-load-file (expand-file-name "init.org" work-emacs-directory)))
#+end_src

If it's not, continue with my usual config.

#+begin_src emacs-lisp
(unless (or work-p (is-linux-p))
  (defvar grzm/org-directory "~/org/")
  (defvar grzm/beorg-directory "/Users/grzm/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/")
  (setq grzm/org-inbox-dot-org (expand-file-name "inbox.org" grzm/org-directory)
        grzm/org-todo-dot-org (expand-file-name "todo.org" grzm/org-directory)
        grzm/org-someday-maybe-dot-org (expand-file-name "someday-maybe.org" grzm/org-directory)

        grzm/beorg-inbox-dot-org (expand-file-name "inbox.org" grzm/beorg-directory)

        grzm/org-template-directory (expand-file-name "org/templates/" user-emacs-directory)
        grzm/zotero-bib "~/Documents/references/bibliography/zotero.bib"

        org-capture-templates
        `(("t" "Task" entry
           (file ,grzm/org-inbox-dot-org)
           (file ,(expand-file-name "task.org" grzm/org-template-directory))
           :prepend t
           :empty-lines 1)

          ("p" "Project" entry
           (file+headline ,grzm/org-todo-dot-org "Projects")
           (file ,(expand-file-name "project.org" grzm/org-template-directory))
           :empty-lines 1)

          ("w" "web reference" entry
           (file ,grzm/org-inbox-dot-org)
           (file ,(expand-file-name "web-ref.org" grzm/org-template-directory))
           :prepend t
           :empty-lines 1))

        org-refile-targets `(((,grzm/org-todo-dot-org
                               ,grzm/org-someday-maybe-dot-org)
                              :maxlevel . 3))

        org-tag-alist
        '(("q" . ?q)
          ("automower" . ?a)
          ("postgresql" . ?p)
          ("emacs" . ?e))

        org-agenda-custom-commands
        '(("n" "Agenda and all TODOs"
           ((agenda "" nil)
            (alltodo "" nil))
           nil))

        org-roam-directory "~/org/org-roam"
        org-roam-db-location (expand-file-name "org-roam.db" org-roam-directory)
        grzm/bibtex-notes-directory (expand-file-name "bibliography/notes/" org-roam-directory)))
#+end_src

I've found Tasshin Michael Fogleman's work on using org-mode with GTD
really helpful.  The templates and daily-review function are built on
his work. See his [[https://github.com/mwfogleman/.emacs.d/blob/master/michael.org#capture-templates][Emacs config]] and his [[https://gist.github.com/mwfogleman/267b6bc7e512826a2c36cb57f0e3d854][Building a Second Brain
templates]]. He also has posted a [[https://www.youtube.com/watch?v=LQwjSd3X9xE][video of how he uses them during his
daily review]].

#+begin_src emacs-lisp
(unless work-p
  (setq grzm/review-dot-org "/tmp/reviews.org")
  (f-touch grzm/review-dot-org)

  ;; This is buggy: first time after startup, calling C-c r, d raises the following error:
  ;; (error "No capture template referred to by \"d\" keys")
  ;; Subsequent calls seem fine, as does calling the function directly.
  (defun grzm/new-daily-review ()
    (interactive)
    (let ((org-capture-templates `(("d" "Review: Daily Review" entry
                                    (file+olp+datetree ,grzm/review-dot-org)
                                    (file ,(expand-file-name "daily-review.org"
                                                             grzm/org-template-directory))))))
      (progn
        (org-capture nil "d")
        (org-capture-finalize t)
        (org-speed-move-safe 'outline-up-heading)
        (org-narrow-to-subtree)
        (org-clock-in))))

  (bind-keys :prefix-map review-map
             :prefix "C-c r"
             ("d" . grzm/new-daily-review)))
#+end_src

** packages
*** autopair
#+begin_src emacs-lisp
(use-package autopair)
#+end_src

*** avy
#+begin_src emacs-lisp
(use-package avy
  :bind (("C-:" . avy-goto-char)
         ("C-'" . avy-goto-char-2)
         ("M-g g" . avy-goto-line)))
#+end_src

*** beacon
#+begin_src emacs-lisp
(use-package beacon
  :if window-system
  :config
  (setq beacon-size 80
        beacon-color "#bbb"
        beacon-blink-duration 0.1
        beacon-blink-delay 0.1)
  (beacon-mode 1))
#+end_src

*** blackout
#+begin_src emacs-lisp
(use-package blackout)

(with-eval-after-load 'auto-revert
    (blackout 'auto-revert-mode))

(with-eval-after-load 'eldoc
    (blackout 'eldoc-mode))
#+end_src
*** browse-kill-ring
#+begin_src emacs-lisp
(use-package browse-kill-ring)
#+end_src

*** cider
#+begin_src emacs-lisp
(use-package cider
  :defines cider-prompt-save-file-on-load
  :config
  (setq cider-prompt-save-file-on-load nil
        cider-eval-result-prefix " ;; => "
        cider-font-lock-dynamically '(macro core function var)
        cider-repl-pop-to-buffer-on-connect 'display-only
        cider-repl-display-help-banner nil
        cider-repl-use-pretty-printing t
        cider-boot-parameters "cider repl -w wait"))
#+end_src

#+begin_src emacs-lisp
(put 'cider-clojure-cli-global-options 'safe-local-variable #'stringp)
(put 'cider-preferred-build-tool 'safe-local-variable #'symbolp)
(put 'cider-boot-parameters 'safe-local-variable #'stringp)
#+end_src


*** clj-refactor
#+begin_src emacs-lisp
(use-package clj-refactor
  :config
  (setq cljr-assume-language-context (quote clj)
        cljr-clojure-test-declaration "[clojure.test :as test :refer [are deftest is]]")
  ;; :bind ("/" . cljr-slash)
  )
#+end_src

*** clojure-mode
#+begin_src emacs-lisp
(use-package clojure-mode
  :blackout "λ"
  :config
  (setq clojure-indent-style :align-arguments
        clojure-align-forms-automatically nil)
  (defun my-clojure-mode-hook ()
    (paredit-mode +1)
    (put-clojure-indent 'defui '(1 nil nil (1)))
    (rainbow-delimiters-mode))
  (add-to-list 'interpreter-mode-alist '("bb" . clojure-mode))
  (add-hook 'clojure-mode-hook 'my-clojure-mode-hook)
  (add-hook 'clojure-mode-hook 'lsp)
  (add-hook 'clojurescript-mode-hook 'lsp)
  (add-hook 'clojurec-mode-hook 'lsp))
#+end_src

*** company
#+begin_src emacs-lisp
(use-package company
  :blackout " ㍿"
  :init
  (setq company-idle-delay nil
        company-async-timeout 15
        company-tooltip-align-annotations t)
  :hook (after-init . global-company-mode))
#+end_src

*** company-prescient
#+begin_src emacs-lisp
(use-package company-prescient
  :init (company-prescient-mode +1))
#+end_src

*** ctrlf
isearch replacement
#+begin_src emacs-lisp
(use-package ctrlf
  :config
  (ctrlf-mode t))
#+end_src

*** delight
#+begin_src emacs-lisp
(use-package delight)
#+end_src

*** dired
=ls= on Darwin doesn't support the =--dired= option.
https://stackoverflow.com/a/42038174
#+begin_src emacs-lisp
(when (is-mac-p)
  (setq dired-use-ls-dired nil))
#+end_src

*** dockerfile-mode
#+begin_src emacs-lisp
(use-package dockerfile-mode
  :mode "Dockerfile[a-zA-Z.-]*\\'")
#+end_src

*** el-patch
#+begin_src emacs-lisp
(use-package el-patch)
#+end_src

*** emacs-lisp-mode
Structural editing rocks. Use it for =emacs-lisp=, too.

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook
          (lambda () (paredit-mode +1)))
#+end_src

*** exec-path-from-shell
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :demand t
  :if (memq window-system '(mac ns))
  :config
  (exec-path-from-shell-initialize))
#+end_src

*** flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode))
#+end_src

*** git-gutter and git-gutter-fringe
#+begin_src emacs-lisp
(let ((package-name (if (display-graphic-p) 'git-gutter-fringe 'git-gutter)))
  (eval `(use-package ,package-name
           :init (global-git-gutter-mode))))
;; Don't need git-gutter to tell us it's active.
(setq git-gutter:lighter "")
#+end_src

*** graphviz-dot-mode
#+begin_src emacs-lisp
(use-package graphviz-dot-mode
  :config
  (setq graphviz-dot-ident-width 2))
#+end_src

*** inf-clojure
#+begin_src emacs-lisp
(use-package inf-clojure)
#+end_src

*** lsp-mode
**** Configuration notes
lsp stores and caches information in various locations
lsp-session-file stores information about which sessions lsp knows about.
lsp project root directories have a =.lsp= directory which includes cached information about the code in the specific project.

#+begin_src emacs-lisp
(use-package lsp-mode
  :delight '(" 𝕃" (lsp--buffer-workspaces
                   ("/" (:eval (mapconcat (lambda (w)
                                            (lsp--workspace-print w))
                                          lsp--buffer-workspaces
                                          "/")))))
  :config
  (setq gc-cons-threshold (* 100 1024 1024)
      read-process-output-max (* 1024 1024)
      treemacs-space-between-root-nodes nil
      lsp-headerline-breadcrumb-enable nil
      company-idle-delay 0.0
      company-minimum-prefix-length 1
      ;; lsp-lens-enable t
      lsp-file-watch-threshold 10000
      lsp-signature-auto-activate nil
      lsp-enable-indentation nil ;; uncomment to use cider indentation instead of lsp
      ;; lsp-enable-completion-at-point nil ;; uncomment to use cider completion instead of lsp
))
#+end_src

*** lua
#+begin_src emacs-lisp
(use-package lua-mode
  :mode "\\.lua\\'"
  :interpreter "lua"
  :config
  (setq lua-indent-level 3)
  ;; https://puntoblogspot.blogspot.com/2018/03/fixing-indentation-of-lua-busted-in.html
  (defun lua-busted-fuckups-fix ()
    (save-excursion
      (lua-forward-line-skip-blanks 'back)
      (let* ((current-indentation (current-indentation))
             (line (thing-at-point 'line t))
             (busted-p (s-matches?
                        (rx (+ bol (* space)
                               (or "context" "describe" "it" "setup" "teardown")
                               "("))
                        line)))
        (when busted-p
          (+ current-indentation lua-indent-level)))))

  (defun rgc-lua-calculate-indentation-override (old-function &rest arguments)
    (or (lua-busted-fuckups-fix)
        (apply old-function arguments)))

  (advice-add #'lua-calculate-indentation-override
              :around #'rgc-lua-calculate-indentation-override))
#+end_src

*** magit
#+begin_src emacs-lisp
(use-package magit
  :config
  (setq magit-diff-refine-hunk (quote all))
  :bind ("C-x g" . magit-status))
#+end_src

*** markdown-mode
#+begin_src emacs-lisp
(use-package markdown-mode
  :mode (("\\`README\\.markdown\\'" . gfm-mode)
         ("\\`README\\.md\\'" . gfm-mode)
         ("\\`CHANGELOG\\.md\\'" . gfm-mode)
         ("\\`CHANGELOG\\.markdown\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :config
  (setq markdown-command "/Users/grzm/homebrew/bin/multimarkdown"

        markdown-css-paths
        '("https://cdn.rawgit.com/sindresorhus/github-markdown-css/gh-pages/github-markdown.css")

        markdown-fontify-code-blocks-natively t))
#+end_src

*** custom functions
#+begin_src emacs-lisp
(defun grzm/iso-8601 (&optional t-val)
  (interactive)
  (let ((t-val (or t-val (current-time))))
    (format-time-string "%FT%T.%3N%z"  t-val)))

(defun grzm/crockford-encode (integer-or-string)
  "Encode a base-10 INTEGER-OR-STRING using Crockford base32 encoding."
  (let* ((i-arg (if (stringp integer-or-string)
                    integer-or-string
                  (number-to-string integer-or-string))))
    (s-trim
     (shell-command-to-string
      (s-join " " (list "~/dev/crockford/bin/encode"
                        (shell-quote-argument i-arg)))))))

(defun grzm/crockford-encode-time (t-epoch)
  (s-downcase (grzm/crockford-encode (format-time-string "%s" t-epoch))))

(defun grzm/random-uuid ()
  (interactive)
  (s-trim (s-downcase (shell-command-to-string "uuidgen"))))
#+end_src

*** markdown-preview-mode
#+begin_src emacs-lisp
(use-package markdown-preview-mode
  :after solarized-theme
  :config
  (setq markdown-preview-stylesheets
        '("https://cdn.rawgit.com/sindresorhus/github-markdown-css/gh-pages/github-markdown.css"
          "https://cdn.rawgit.com/isagalaev/highlight.js/master/src/styles/solarized-light.css")))
#+end_src

*** pdf-tools
The first time loading a fresh Emacs installation, this will fail, but
then build pdf-tools. Subsequent loading should succeed.
#+begin_src emacs-lisp
(when (not (or (grzm/is-m1-arm-p) work-p))
  (use-package pdf-tools
    :if window-system
    :config
    (pdf-tools-install :no-query)
    (add-hook 'pdf-view-mode-hook (lambda () (linum-mode -1)))))
#+end_src

*** org
#+begin_src emacs-lisp
(use-package org
  :delight org-mode "✎"
  :bind (("C-c l" . org-store-link)
         ("C-c c" . org-capture)
         ("C-c a" . org-agenda))
  :config
  (setq
   underline-minimum-offset 5
   org-startup-folded t
   org-startup-indented t

   org-ellipsis " ↩ "
   org-hide-emphasis-markers t
   org-hide-leading-stars t

   org-support-shift-select t

   org-edit-src-content-indentation 0
   org-src-tab-acts-natively t
   org-special-ctrl-a/e t
   org-special-ctrl-k t
   org-fontify-whole-heading-line t
   org-fontify-done-headline t
   org-fontify-quote-and-verse-blocks t

   org-refile-use-outline-path 'full-file-path
   org-outline-path-complete-in-steps nil
   org-refile-allow-creating-parent-nodes 'confirm

   org-agenda-show-all-dates t
   org-duration-format (quote h:mm)

   org-todo-keywords (quote ((sequence "TODO(t)"
                                       "STARTED(s)"
                                       "NEXT(n)"
                                       "APPT(a)"
                                       "WAITING(w)"
                                       "SOMEDAY(p)"
                                       "|"
                                       "DONE(d)"
                                       "CANCELLED(c)"
                                       "DEFERRED(f)")))

   ;; From Sacha Chua: use l for src emacs-lisp instead of rarely-used export LaTeX
   org-structure-template-alist  '(("a" . "export ascii")
                                   ("c" . "center")
                                   ("C" . "comment")
                                   ("e" . "example")
                                   ("E" . "export")
                                   ("h" . "export html")
                                   ("l" . "src emacs-lisp")
                                   ("q" . "quote")
                                   ("s" . "src")
                                   ("v" . "verse"))

   org-log-done 'time
   org-startup-with-inline-images t)
  (font-lock-add-keywords 'org-mode
                          '(("^ +\\([+-*]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  (org-babel-do-load-languages
   'org-babel-load-languages '((dot . t)))
  (add-hook 'org-mode-hook #'(lambda () (variable-pitch-mode t)))

  (org-babel-do-load-languages
   'org-babel-load-languages '((dot . t))))
#+end_src

https://emacs.stackexchange.com/questions/7429/how-to-customize-org-mode-indentation
https://www.mail-archive.com/emacs-orgmode@gnu.org/msg122243.html Better org-indent alignment when using variable-pitch-mode

#+begin_src emacs-lisp  :tangle no
(el-patch-feature org-indent--compute-prefixes)
(with-eval-after-load 'org-indent--compute-prefixes
  (el-patch-defun org-indent--compute-prefixes ()
                  "Compute prefix strings for regular text and headlines."
                  (setq org-indent--heading-line-prefixes
                        (make-vector org-indent--deepest-level nil))
                  (setq org-indent--inlinetask-line-prefixes
                        (make-vector org-indent--deepest-level nil))
                  (setq org-indent--text-line-prefixes
                        (make-vector org-indent--deepest-level nil))
                  (dotimes (n org-indent--deepest-level)
                    (let ((indentation (if (<= n 1) 0
                                         (* (1- org-indent-indentation-per-level)
                                            (1- n)))))
                      ;; Headlines line prefixes.
                      (let ((heading-prefix (make-string indentation ?*)))
                        (aset org-indent--heading-line-prefixes
                              n
                              (org-add-props heading-prefix nil 'face 'org-indent))
                        ;; Inline tasks line prefixes
                        (aset org-indent--inlinetask-line-prefixes
                              n
                              (cond ((<= n 1) "")
                                    ((bound-and-true-p org-inlinetask-show-first-star)
                                     (concat org-indent-inlinetask-first-star
                                             (substring heading-prefix 1)))
                                    (t (org-add-props heading-prefix nil 'face 'org-indent)))))
                      ;; Text line prefixes.
                      (aset org-indent--text-line-prefixes
                            n
                            (org-add-props
                                (concat (make-string (+ n indentation) (el-patch-swap  ?\s ?*))
                                        (and (> n 0)
                                             (char-to-string org-indent-boundary-char)))
                                nil 'face 'org-indent))))))
#+end_src

*** org-bullets
#+begin_src emacs-lisp
(use-package org-bullets
  :disabled
  :init
  (add-hook 'org-mode-hook
            (lambda () (org-bullets-mode 1))))
#+end_src

*** org-pdftools
#+begin_src emacs-lisp
(unless (or work-p (grzm/is-m1-arm-p))
  (use-package org-pdftools
    :if window-system
    :hook (org-mode . org-pdftools-setup-link)))
#+end_src

*** org-ref
The =org-ref= package uses =helm-bibtex= as its default implementation, so
I've included most of the configuration there.

#+begin_src emacs-lisp
(use-package org-ref
  :demand t ;; I'd really like to autoload org-ref, but I don't know how.
  :config
  (unless (or work-p (is-linux-p))
    (setq org-ref-default-bibliography (list grzm/zotero-bib)
          ;; default completion library is org-ref-helm-bibtex
          ;; org-ref-completion-library 'org-ref-helm-bibtex
          org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex)))
#+end_src

*** org-roam
#+begin_src emacs-lisp
(use-package org-roam
  :if (is-mac-p)
  :blackout " 🅡"
  :hook (after-init . org-roam-mode)
  :bind (("C-c n f" . org-roam-find-file)
         :map org-roam-mode-map
         (("C-c n l" . org-roam)
          ("C-c n b" . org-roam-switch-to-buffer)
          ("C-c n g" . org-roam-graph))
         :map org-mode-map
         (("C-c n i" . org-roam-insert)))
  :config
  (setq org-roam-completion-system 'helm
        org-roam-graph-executable "/opt/local/bin/dot"
        org-roam-graph-extra-config '(("overlap" . "false"))
        org-roam-graph-viewer  "~/bin/open-in-safari" ;; simple wrapper around "open -a Safari $1"

        org-roam-capture-templates
        '(("z" "zettelkästen" plain #'org-roam-capture--get-point
           "%?"
           ;; UTC timestamp in file name courtesy of https://github.com/jethrokuan/org-roam/issues/416
           :file-name "%(format-time-string \"%Y%m%dT%H%M%SZ--${slug}\" (current-time) t)"
           :head "#+TITLE: ${title}
:PROPERTIES:
:created-at: %(grzm/iso-8601 (current-time))
:zk-id: %(grzm/crockford-encode-time (current-time))
:END:
"
           :unnarrowed t))

        org-roam-capture-ref-templates
        '(("r" "ref" plain #'org-roam-capture--get-point
           "%?"
           :file-name "refs/%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}\" (current-time) t)"
           :head "#+TITLE: ${title}
,#+ROAM_KEY: ${ref}
:PROPERTIES:
:created-at: %(grzm/iso-8601 (current-time))
:zk-id: %(grzm/crockford-encode-time (current-time))
:END:
- source :: ${ref}"
           :unnarrowed t))

        org-roam-dailies-directory "daily/"

        org-roam-dailies-capture-templates
        '(("d" "default" entry
           #'org-roam-capture--get-point
           "* %?"
           :file-name "daily/%<%Y-%m-%d>"
           :head "#+title: %<%Y-%m-%d>\n\n"))
        )
  (require 'org-roam-protocol)
  ;; Overriding org-roam--title-to-slug via https://github.com/jethrokuan/org-roam/issues/287
  (defun org-roam--title-to-slug (title)
    "Convert TITLE to a filename-suitable slug. Uses hyphens rather than underscores."
    (cl-flet* ((nonspacing-mark-p (char)
                                  (eq 'Mn (get-char-code-property char 'general-category)))
               (strip-nonspacing-marks (s)
                                       (apply #'string (seq-remove #'nonspacing-mark-p
                                                                   (ucs-normalize-NFD-string s))))
               (cl-replace (title pair)
                           (replace-regexp-in-string (car pair) (cdr pair) title)))
      (let* ((pairs `(("[^[:alnum:][:digit:]]" . "-")  ;; convert anything not alphanumeric
                      ("--*" . "-")  ;; remove sequential underscores
                      ("^-" . "")  ;; remove starting underscore
                      ("-$" . "")))  ;; remove ending underscore
             (slug (-reduce-from #'cl-replace (strip-nonspacing-marks title) pairs)))
        (s-downcase slug)))))
#+end_src

*** org-roam-server
#+begin_src emacs-lisp
(use-package org-roam-server
  :if window-system
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-export-inline-images t
        org-roam-server-authenticate nil
        org-roam-server-network-poll t
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))
#+end_src

*** org-superstar
I'd like better typography in Emacs for a number of reasons. One of
which is to set proper indents so I would have more options for
differentiating headline levels, but using org-superstar to
differentiate levels by character will have to do. (Color is another
option-used option, but I prefer things a little less noisy.)

One infelicity worth mentioning: I use a proportional font in org-mode
and override the default asterisk using =org-superstar=. I also use
=org-hide-leading-stars=. =org-superstar= does not override the characters
used to represent hidden stars, which leads to text on lines following
a headline being unaligned with the headline text. Perhaps there's a
way to do this, but I haven't dug too deeply. I think the fault is in
=org-indent--compute-prefixes= where heading-prefix hard-codes an
asterisk when making a heading prefix.

#+begin_src emacs-lisp
(use-package org-superstar
  ;; :demand t ;; If I don't demand it here, org-superstar doesn't load automatically
  :hook (org-mode . org-superstar-mode)
  :custom-face
  (org-superstar-header-bullet ((t (:family "Hiragino Sans"))))
  (org-superstar-leading ((t (:family "Hiragino Sans"))))
  :config
  (setq org-superstar-headline-bullets-list '("◉" "○" "◎" "●")
        org-superstar-leading-bullet ?○
        org-superstar-prettify-leading-stars t))
#+end_src

*** ox-reveal
#+begin_src emacs-lisp
(use-package ox-reveal
  :if (is-mac-p)
  :config
  (add-hook 'org-mode-hook #'(lambda () (load-library "ox-reveal"))))
#+end_src

*** paredit
#+begin_src emacs-lisp
(use-package paredit
  :straight (:host github :repo "emacsmirror/paredit" :flavor melpa)
  :blackout " 🄟"
  :hook ((lisp-mode emacs-lisp-mode) . paredit-mode)
  :config
  (defun check-region-parens ()
    "Check if parentheses in the region are balanced. Signals a
scan-error if not."
    (interactive)
    (save-restriction
      (save-excursion
        (let ((deactivate-mark nil))
          (condition-case c
              (progn
                (narrow-to-region (region-beginning) (region-end))
                (goto-char (point-min))
                (while (/= 0 (- (point)
                                (forward-list))))
                t)
            (scan-error (signal 'scan-error '("Region parentheses not balanced")))))))))
#+end_src

*** projectile
#+begin_src emacs-lisp
(use-package projectile
  :delight '(:eval (concat " 𝓟/" (projectile-project-name)))
  :init (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("C-c p" . projectile-command-map)
              ("s-p" . projectile-command-map))
  :config
  ;; use completing-read https://github.com/raxod502/selectrum/issues/112#issuecomment-644815356
  (setq projectile-completion-system 'default
        projectile-use-git-grep t))
#+end_src

*** pollen
#+begin_src emacs-lisp
(define-minor-mode pollen-mode "edit pollen markup")

(add-to-list 'auto-mode-alist '("\\.pp$" . pollen-mode))
#+end_src

*** PostgreSQL hacking config
#+begin_src emacs-lisp
;; This file contains code to set up Emacs to edit PostgreSQL source
;; code.  Copy these snippets into your .emacs file or equivalent, or
;; use load-file to load this file directly.
;;
;; Note also that there is a .dir-locals.el file at the top of the
;; PostgreSQL source tree, which contains many of the settings shown
;; here (but not all, mainly because not all settings are allowed as
;; local variables).  So for light editing, you might not need any
;; additional Emacs configuration.


;;; C files

;; Style that matches the formatting used by
;; src/tools/pgindent/pgindent.  Many extension projects also use this
;; style.
(c-add-style "postgresql"
             '("bsd"
               (c-auto-align-backslashes . nil)
               (c-basic-offset . 4)
               (c-offsets-alist . ((case-label . +)
                                   (label . -)
                                   (statement-case-open . +)))
               (fill-column . 78)
               (indent-tabs-mode . t)
               (tab-width . 4)))

(defun postgresql-c-mode-hook ()
  (when (string-match "/postgres\\(ql\\)?/" buffer-file-name)
    (c-set-style "postgresql")
    ;; Don't override the style we just set with the style in
    ;; `dir-locals-file'.  Emacs 23.4.1 needs this; it is obsolete,
    ;; albeit harmless, by Emacs 24.3.1.
    (set (make-local-variable 'ignored-local-variables)
         (append '(c-file-style) ignored-local-variables))))

(add-hook 'c-mode-hook 'postgresql-c-mode-hook)


;;; Perl files

;; Style that matches the formatting used by
;; src/tools/pgindent/perltidyrc.
(defun pgsql-perl-style ()
  "Perl style adjusted for PostgreSQL project."
  (interactive)
  (setq perl-brace-imaginary-offset 0
        perl-brace-offset 0
        perl-continued-brace-offset 4
        perl-continued-statement-offset 4
        perl-indent-level 4
        perl-label-offset -2
        indent-tabs-mode t
        tab-width 4))

(add-hook 'perl-mode-hook
          (defun postgresql-perl-mode-hook ()
            (when (string-match "/postgres\\(ql\\)?/" buffer-file-name)
              (pgsql-perl-style))))


;;; Makefiles

;; use GNU make mode instead of plain make mode
(add-to-list 'auto-mode-alist '("/postgres\\(ql\\)?/.*Makefile.*" . makefile-gmake-mode))
(add-to-list 'auto-mode-alist '("/postgres\\(ql\\)?/.*\\.mk\\'" . makefile-gmake-mode))
#+end_src

*** prescient
#+begin_src emacs-lisp
(use-package prescient
  :init (prescient-persist-mode +1))
#+end_src

*** Emacs server
#+begin_src emacs-lisp
(load "server")
(unless (server-running-p) (server-start))
(require 'org-protocol)
(require 'org-roam-protocol)
#+end_src

*** show-paren-mode
#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src

*** rainbow-delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** recentf
#+begin_src emacs-lisp
(use-package recentf
  :defer 10
  :bind ("C-x C-r" . recentf-open-files)
  :config
  (recentf-mode 1)
  (setq recentf-max-menu-items 50
        recentf-max-saved-items 100))
#+end_src

*** ruby-mode
#+begin_src emacs-lisp
(use-package ruby-mode
  :mode (("\\.rake\'" . ruby-mode)
         ("Rakefile\'" . ruby-mode)
         ("rakefile\'" . ruby-mode)
         ("\\.gemspec'" . ruby-mode)))
#+end_src

*** selectrum
#+begin_src emacs-lisp
(use-package selectrum
  :init (selectrum-mode +1))
#+end_src

*** selectrum-prescient
#+begin_src emacs-lisp
(use-package selectrum-prescient
  :init (selectrum-prescient-mode +1))
#+end_src

*** shell-script-mode
Use =shell-script-mode= for scripts with a =bash= she-bang. Works with
=#!/bin/bash= and =#!/usr/bin/env bash=.

#+begin_src emacs-lisp
(add-to-list 'interpreter-mode-alist '("bash" . shell-script-mode))
#+end_src

*** solarized-theme
#+begin_src emacs-lisp
(use-package solarized-theme
  :if window-system
  :config
  (setq solarized-distinct-fringe-background t
        solarized-high-contrast-mode-line t))
#+end_src

*** tide
#+begin_src emacs-lisp
(use-package tide
  :after (typescript-mode company flycheck)
  :hook ((typescript-mode . tide-setup)
         (before-save . tide-format-before-save)
         (after-save . tide-auto-compile-file)))
#+end_src

***  typescript
#+begin_src emacs-lisp
(use-package typescript-mode
  :blackout "𝓣"
  :mode "\\.ts\\'"
  :init (setq typescript-indent-level 2))
#+end_src

*** typo
#+begin_src emacs-lisp
(use-package typo
  :config
  (progn
    (setq-default typo-language "English")
    (defun enable-typo-mode ()
      (cond ((string-match "/_\\(drafts\\|posts\\)/.+\\.\\(markdown\\|\\md\\)$" buffer-file-name)
             (typo-mode 1))))
    (add-hook 'markdown-mode-hook 'enable-typo-mode)))
#+end_src

*** visual-fill-column
#+begin_src emacs-lisp
(use-package visual-fill-column
  :config
  (add-hook 'visual-line-mode-hook #'visual-fill-column-mode)
  (advice-add 'text-scale-adjust :after #'visual-fill-column-adjust))
#+end_src

*** yaml-mode
#+begin_src emacs-lisp
(use-package yaml-mode
  :mode "\\.ya?ml\\'")
#+end_src

*** yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (setq yasindent-line 'fixed))
#+end_src

#+begin_src emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
(setq create-lockfiles nil)
#+end_src

* Report initialization timing

#+begin_src emacs-lisp
(when window-system
  (let ((elapsed (float-time (time-subtract (current-time)
                                            emacs-start-time))))
    (message "Loading %s...done (%.3fs)" load-file-name elapsed))

  (add-hook 'after-init-hook
            `(lambda ()
               (let ((elapsed (float-time (time-subtract (current-time)
                                                         emacs-start-time))))
                 (message "Loading %s...done (%.3fs) [after-init]"
                          ,load-file-name elapsed )))
            t))
#+end_src
